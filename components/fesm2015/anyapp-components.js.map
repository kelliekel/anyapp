{"version":3,"file":"anyapp-components.js.map","sources":["ng://@anyapp/components/lib/components.model.ts","ng://@anyapp/components/lib/components.config.ts","ng://@anyapp/components/lib/components.service.ts","ng://@anyapp/components/lib/base-control.ts","ng://@anyapp/components/lib/util.ts","ng://@anyapp/components/lib/form-control.ts","ng://@anyapp/components/lib/button/button.component.ts","ng://@anyapp/components/lib/table/table.component.ts","ng://@anyapp/components/lib/error-state-matcher.ts","ng://@anyapp/components/lib/model-control.ts","ng://@anyapp/components/lib/input/input.component.ts","ng://@anyapp/components/lib/checkbox/checkbox.component.ts","ng://@anyapp/components/lib/select/select.component.ts","ng://@anyapp/components/lib/datepicker/datepicker.component.ts","ng://@anyapp/components/lib/slider/slider.component.ts","ng://@anyapp/components/lib/icon/icon.component.ts","ng://@anyapp/components/lib/textarea/textarea.component.ts","ng://@anyapp/components/lib/label/label.component.ts","ng://@anyapp/components/lib/form/form.directive.ts","ng://@anyapp/components/lib/loading/loading.component.ts","ng://@anyapp/components/lib/error/error.component.ts","ng://@anyapp/components/lib/table/paginator.intl.ts","ng://@anyapp/components/lib/table/sort.intl.ts","ng://@anyapp/components/lib/top-menu/top-menu.component.ts","ng://@anyapp/components/lib/side-menu/side-menu.component.ts","ng://@anyapp/components/lib/side-menu/side-menu-item/side-menu-item.component.ts","ng://@anyapp/components/lib/components.module.ts"],"sourcesContent":["export class AnyAppEventModel<T = {}> {\r\n\tkey: AnyAppEventKeys;\r\n\tvalue?: T;\r\n\r\n\tconstructor(key: AnyAppEventKeys, value?: T) {\r\n\t\tthis.key = key;\r\n\t\tthis.value = value;\r\n\t}\r\n}\r\n\r\nexport class AnyAppMenuItem {\r\n\ttext: string;\r\n\tkey: string;\r\n}\r\n\r\nexport class AnyAppTreeModel {\r\n    public text: string;\r\n    public children: AnyAppTreeModel[];\r\n    public Id: number;\r\n    public expanded?:boolean;\r\n    public navigateUrl?: string;\r\n    \r\n    constructor(id: number, text: string, children?: AnyAppTreeModel[], expanded?: boolean, navigateUrl?: string) {\r\n        this.text = text;\r\n        this.children = children;\r\n        this.Id = id;\r\n        this.expanded = expanded;\r\n        this.navigateUrl = navigateUrl;\r\n    }\r\n    \r\n    toggle(){\r\n        this.expanded = !this.expanded;\r\n    }\r\n}\r\n\r\nexport enum AnyAppEventKeys {\r\n\tMESSAGE_CLICK = 1,\r\n\tMENU_ITEM_CLICK = 2,\r\n\tMENU_FACE_CLICK = 3,\r\n\tMENU_NOTIFICATION_CLICK = 4,\r\n}","import { InjectionToken } from \"@angular/core\";\r\n\r\nexport const ANYAPP_COMPONENTS_CONFIG = new InjectionToken<AnyAppComponentsConfig>('anyapp-default-components-options');\r\n\r\nexport interface AnyAppComponentsConfig {\r\n\tmessageDuration: number;\r\n\tlocale: string;\r\n\t//\r\n\terrorMessages: AnyAppErrorMessages;\r\n\tlocales: AnyAppLocales;\r\n\t//\r\n\tbuttonConfig: AnyAppButtonConfig;\r\n\tformConfig: AnyAppFormConfig;\r\n\ttableConfig: AnyAppTableConfig;\r\n}\r\n\r\nexport interface AnyAppButtonConfig {\r\n\tbuttonTimeoutThreshold: number;\r\n}\r\n\r\nexport interface AnyAppFormConfig {\r\n}\r\n\r\nexport interface AnyAppTableConfig {\r\n\tpageSize: number;\r\n\tselectOption: TableSelectEnum;\r\n}\r\n\r\nexport interface AnyAppErrorMessages {\r\n\trequired: string;\r\n\temail: string;\r\n\tpattern: string;\r\n\tminLength: string;\r\n\tmaxLength: string;\r\n\tinvalidFormMessage: string;\r\n}\r\n\r\nexport interface AnyAppLocales {\r\n\tpaginator_firstPage: string;\r\n\tpaginator_lastPage: string;\r\n\tpaginator_itemsPerPage: string;\r\n\tpaginator_of: string;\r\n\tpaginator_nextPage: string;\r\n\tpaginator_previousPage: string;\r\n\r\n\tsort_buttonLabel: string;\r\n}\r\n\r\nexport enum TableSelectEnum {\r\n\tNoSelect = 0,\r\n\tSingleSelect = 1,\r\n\tMultiSelect = 2,\r\n}","import { MatSnackBar, MatSnackBarConfig, MatSnackBarRef, SimpleSnackBar } from '@angular/material';\nimport { Injectable, Inject } from '@angular/core';\nimport { ANYAPP_COMPONENTS_CONFIG, AnyAppComponentsConfig } from './components.config';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ComponentsService {  \n  constructor(\n    @Inject(ANYAPP_COMPONENTS_CONFIG) private config: AnyAppComponentsConfig,\n    private _snackbar: MatSnackBar) { \n  }\n\n  public showMessage(message: string, action: string) : MatSnackBarRef<SimpleSnackBar> {\n    return this._snackbar.open(message, action, <MatSnackBarConfig>{\n      duration: this.config.messageDuration\n    });\n  }\n}\n","import { Input, Injector, Output, EventEmitter } from \"@angular/core\";\r\nimport { AnyAppComponentsConfig, ANYAPP_COMPONENTS_CONFIG } from \"./components.config\";\r\nimport { ComponentsService } from \"./components.service\";\r\nimport { AnyAppEventModel } from \"./components.model\";\r\n\r\nexport abstract class AnyAppBaseControl {\r\n  @Output() onEvent: EventEmitter<AnyAppEventModel> = new EventEmitter<AnyAppEventModel>();\r\n  \r\n  config: AnyAppComponentsConfig;\r\n  componentsService: ComponentsService;\r\n\r\n  constructor(private _injector: Injector) {\r\n    this.config = _injector.get(ANYAPP_COMPONENTS_CONFIG);\r\n    this.componentsService = _injector.get(ComponentsService);\r\n  }\r\n}","import { AbstractControl } from \"@angular/forms\";\r\n\r\nexport const hasRequiredField = (abstractControl: AbstractControl): boolean => {\r\n    if (abstractControl.validator) {\r\n        const validator = abstractControl.validator({}as AbstractControl);\r\n        if (validator && validator.required) {\r\n            return true;\r\n        }\r\n    }\r\n    if (abstractControl['controls']) {\r\n        for (const controlName in abstractControl['controls']) {\r\n            if (abstractControl['controls'][controlName]) {\r\n                if (hasRequiredField(abstractControl['controls'][controlName])) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n};","import { Input, Injector } from \"@angular/core\";\r\nimport { NgForm, FormControl } from \"@angular/forms\";\r\nimport { AnyAppComponentsConfig, ANYAPP_COMPONENTS_CONFIG } from \"./components.config\";\r\nimport { AnyAppBaseControl } from \"./base-control\";\r\nimport { hasRequiredField } from \"./util\";\r\n\r\nexport abstract class AnyAppFormControl extends AnyAppBaseControl {\r\n  @Input() form: NgForm; // form contains formgroup\r\n  @Input() formControlName: string;\r\n  @Input() formControl: FormControl;\r\n  @Input() disabled: boolean = false;\r\n\r\n  hasRequiredField: boolean;\r\n\r\n  constructor(_injector: Injector) {\r\n    super(_injector);\r\n  }\r\n\r\n  initializeForm() {\r\n    if (this.formControlName) { // name = set\r\n      if (this.formControl == null) { // fc is not set\r\n        if (this.form && this.form.form) { // find control and set\r\n          this.formControl = this.form.form.controls[this.formControlName] as FormControl;\r\n        }\r\n      }\r\n    }\r\n\r\n    if(this.formControl) {\r\n      this.hasRequiredField = hasRequiredField(this.formControl);\r\n    }\r\n  }\r\n}","import { Component, OnInit, HostListener, ElementRef, Renderer2, Input, Inject, Injector } from '@angular/core';\nimport { AnyAppFormControl } from '../form-control';\n\n@Component({\n  selector: 'aa-comp-button',\n  template: `<ng-container [ngSwitch]=\"style\">\n  <button id=\"button\" *ngSwitchCase=\"'raised'\" mat-raised-button [type]=\"type\" [disabled]=\"disabled\" [color]=\"color\"><ng-container *ngTemplateOutlet=\"transclude\"></ng-container></button>\n  <button id=\"button\" *ngSwitchCase=\"'stroked'\" mat-stroked-button [type]=\"type\" [disabled]=\"disabled\" [color]=\"color\"><ng-container *ngTemplateOutlet=\"transclude\"></ng-container></button>\n  <button id=\"button\" *ngSwitchCase=\"'flat'\" mat-flat-button [type]=\"type\" [disabled]=\"disabled\" [color]=\"color\"><ng-container *ngTemplateOutlet=\"transclude\"></ng-container></button>\n  <button id=\"button\" *ngSwitchCase=\"'icon'\" mat-icon-button [type]=\"type\" [disabled]=\"disabled\" [color]=\"color\"><ng-container *ngTemplateOutlet=\"transclude\"></ng-container></button>\n  <button id=\"button\" *ngSwitchCase=\"'fab'\" mat-fab [type]=\"type\" [disabled]=\"disabled\" [color]=\"color\"><ng-container *ngTemplateOutlet=\"transclude\"></ng-container></button>\n  <button id=\"button\" *ngSwitchDefault mat-button [type]=\"type\" [disabled]=\"disabled\" [color]=\"color\"><ng-container *ngTemplateOutlet=\"transclude\"></ng-container></button>\n</ng-container>\n\n<ng-template #transclude><ng-content></ng-content></ng-template>`,\n  styles: [``]\n})\nexport class ButtonComponent extends AnyAppFormControl implements OnInit {\n  @Input() timeout: boolean = true;\n\n  @Input() type: string = 'button';\n\n  @Input() style: 'default' | 'raised' | 'stroked' | 'flat' | 'icon' | 'fab' = 'flat'\n  @Input() color: 'primary' | 'accent' | 'warn' = 'primary';\n\n  constructor(\n    _injector: Injector,\n    private renderer: Renderer2, \n    private el: ElementRef) {\n      super(_injector);\n  }\n\n  ngOnInit() {\n    this.initializeForm();\n  }\n\n  @HostListener('click', ['$event'])\n  submitAttachedForm(event: Event) {\n    if (this.form != null && this.type == \"button\") { // if form is set and type is button\n      this.form.onSubmit(event); // this will also update the submitted state\n      //this.form.ngSubmit.next(true);\n      //this.form.ngSubmit.emit(event);\n    }\n\n    // make sure a user can not click the button multiple times within a limited time\n    this.handleButtonTimeoutTreshold();\n  }\n\n  private handleButtonTimeoutTreshold() {\n    if (this.timeout) {\n      setTimeout(() => {\n        this.setDisabled(true);\n        setTimeout(() => { this.setDisabled(null); }, this.config.buttonConfig.buttonTimeoutThreshold);\n      }, 0);\n    }\n  }\n\n  private setDisabled(disabled: boolean) {\n    if (disabled)\n      this.renderer.setAttribute(this.el.nativeElement.children[\"button\"], \"disabled\", disabled.toString());\n    else\n      this.renderer.removeAttribute(this.el.nativeElement.children[\"button\"], \"disabled\");\n  }\n}","import { Component, OnInit, Input, ViewChild, Injector } from '@angular/core';\nimport { MatSort, MatPaginator, MatTableDataSource } from '@angular/material';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { AnyAppBaseControl } from '../base-control';\n\n@Component({\n  selector: 'aa-comp-table',\n  template: `<table mat-table [dataSource]=\"dataSource\" matSort class=\"mat-elevation-z8\">\n  \n  <ng-container *ngIf=\"allowSelect\" matColumnDef=\"select\">\n    <th mat-header-cell *matHeaderCellDef>\n      <mat-checkbox *ngIf=\"allowMultiSelect\" (change)=\"$event ? masterToggle() : null\"\n                    [checked]=\"selection.hasValue() && isAllSelected()\"\n                    [indeterminate]=\"selection.hasValue() && !isAllSelected()\">\n      </mat-checkbox>\n    </th>\n    <td mat-cell *matCellDef=\"let row\">\n      <mat-checkbox (click)=\"$event.stopPropagation()\"\n                    (change)=\"$event ? selection.toggle(row) : null\"\n                    [checked]=\"selection.isSelected(row)\">\n      </mat-checkbox>\n    </td>\n  </ng-container>\n\n  <ng-container *ngFor=\"let col of columns\" [matColumnDef]=\"col\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header> {{col}} </th>\n    <td mat-cell *matCellDef=\"let element\"> {{element[col]}} </td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"columns\"></tr>\n  <tr mat-row *matRowDef=\"let row; columns: columns;\"></tr>\n</table>\n\n<mat-paginator showFirstLastButtons></mat-paginator>`,\n  styles: [`table{width:100%}`]\n})\nexport class TableComponent extends AnyAppBaseControl implements OnInit {\n  //\n  // mandatory\n  //  \n  @Input() data: any[];\n  @Input() columns: string[];\n  //\n  // Not mandatory\n  //\n  @Input() allowSort: boolean = true;\n  @Input() allowPaging: boolean = true;\n  @Input() pageSize: number = 50;\n  @Input() allowSelect: boolean = false;\n  @Input() allowMultiSelect: boolean = false;\n    \n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n  selection: SelectionModel<any>;\n\n  dataSource: MatTableDataSource<any>;\n\n  constructor(_injector: Injector) { \n    super(_injector);\n  }\n\n  ngOnInit() {\n    this.dataSource = new MatTableDataSource<any>(this.data);\n    this.selection = new SelectionModel<any>(this.allowMultiSelect, []);\n    \n    if(this.allowPaging) {\n      this.paginator.pageSize = this.pageSize;\n      this.dataSource.paginator = this.paginator;\n    }\n\n    if(this.allowSort)\n      this.dataSource.sort = this.sort;\n  }\n\n  /** Whether the number of selected elements matches the total number of rows. */\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.dataSource.data.length;\n    return numSelected == numRows;\n  }\n\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\n  masterToggle() {\n    this.isAllSelected() ?\n        this.selection.clear() :\n        this.dataSource.data.forEach(row => this.selection.select(row));\n  }\n}\n","import { ErrorStateMatcher } from \"@angular/material\";\r\nimport { FormControl, FormGroupDirective, NgForm } from \"@angular/forms\";\r\n\r\nexport class AnyAppErrorStateMatcher implements ErrorStateMatcher {\r\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\r\n    const isSubmitted = form && form.submitted;\r\n    var returnVal = !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\r\n    return returnVal;\r\n  }\r\n}","import { AnyAppFormControl } from \"./form-control\";\r\nimport { Injector } from \"@angular/core\";\r\nimport { AnyAppErrorStateMatcher } from \"./error-state-matcher\";\r\n\r\nexport abstract class AnyAppModelControl extends AnyAppFormControl {\r\n\tprivate _innerValue: any = null;\r\n\tmatcher: AnyAppErrorStateMatcher;\r\n\r\n\tconstructor(_injector: Injector) {\r\n\t\tsuper(_injector);\r\n\t\tthis.matcher = new AnyAppErrorStateMatcher();\r\n\t}\r\n\r\n\tget innerValue() {\r\n\t\treturn this._innerValue;\r\n\t}\r\n\tset innerValue(val) {\r\n\t\tthis._innerValue = val;\r\n\t\tthis.propagateChange(this._innerValue);\r\n\t}\r\n\t\r\n\tonModelChange(event) {\r\n\t\tif (this._innerValue != event) {\r\n\t\t\tthis.innerValue = event; // update only if changed\r\n\t\t}\r\n\t}\r\n\r\n\t// gets called when the form is initialized (write to view)\r\n\twriteValue(value: any) {\r\n\t\tif (value !== undefined) {\r\n\t\t\tthis._innerValue = value;\r\n\t\t}\r\n\t}\r\n\r\n\t// propagate the new value to the outside world\r\n\tpropagateChange = (_: any) => { };\r\n\r\n\t// has access to a function that informs the outside world about changes\r\n\tregisterOnChange(fn) {\r\n\t\tthis.propagateChange = fn;\r\n\t}\r\n\r\n\t// registers a callback that is excuted whenever a form control is âtouchedâ\r\n\tregisterOnTouched() { }\r\n}","import { Component, OnInit, Input, forwardRef, Injector } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { AnyAppModelControl } from '../model-control';\n\n@Component({\n  selector: 'aa-comp-input',\n  template: `<aa-comp-label *ngIf=\"label\">\n  {{label}}\n</aa-comp-label>\n\n<mat-form-field>\n  <input matInput [placeholder]=\"placeholder\" #input [type]=\"type\" [(ngModel)]=\"innerValue\" \n    [errorStateMatcher]=\"matcher\" [disabled]=\"disabled\">\n\n  <mat-hint align=\"start\" *ngIf=\"hint\">{{hint}}</mat-hint>\n  <mat-hint align=\"end\" *ngIf=\"maxLength\">{{input.value.length}} / {{maxLength}}</mat-hint>\n\n  \n  <aa-comp-error [errorControl]=\"formControl\"></aa-comp-error>\n\n</mat-form-field>\n<!--[formControl]=\"form?.controls[formControlName]\"-->`,\n  styles: [``],\n  providers: [\n    { \n      provide: NG_VALUE_ACCESSOR, //Angular internaly injects all values that are registered on the NG_VALUE_ACCESSOR token\n      useExisting: forwardRef(() => InputComponent),\n      multi: true\n    }\n  ]\n})\nexport class InputComponent extends AnyAppModelControl implements OnInit, ControlValueAccessor {  \n  @Input() label: string;\n  @Input() placeholder: string;\n  @Input() type: string = \"text\";\n  @Input() hint: string;\n\n  @Input() maxLength: number = null;\n\n  constructor(_injector: Injector) { \n    super(_injector);\n  }\n\n  ngOnInit() {\n    this.initializeForm();\n  }\n}\n","import { Component, OnInit, forwardRef, Input, Injector } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { AnyAppModelControl } from '../model-control';\n\n@Component({\n  selector: 'aa-comp-checkbox',\n  template: `<mat-checkbox *ngIf=\"!slideToggle\" #input [(ngModel)]=\"innerValue\" [labelPosition]=\"labelPosition\">\n  <aa-comp-label *ngIf=\"label\">\n    {{label}}\n  </aa-comp-label>\n</mat-checkbox>\n\n<mat-slide-toggle *ngIf=\"slideToggle\" #input [(ngModel)]=\"innerValue\" [disabled]=\"disabled\">\n  <aa-comp-label *ngIf=\"label\">\n    {{label}}\n  </aa-comp-label>\n</mat-slide-toggle>\n\n<mat-hint *ngIf=\"hint\">{{hint}}</mat-hint>`,\n  styles: [``],\n  providers: [\n    { \n      provide: NG_VALUE_ACCESSOR, //Angular internaly injects all values that are registered on the NG_VALUE_ACCESSOR token\n      useExisting: forwardRef(() => CheckboxComponent),\n      multi: true\n    }\n  ]\n})\nexport class CheckboxComponent extends AnyAppModelControl implements OnInit, ControlValueAccessor {\n  @Input() label: string;\n  @Input() labelPosition: 'before' | 'after' = 'after';\n  @Input() hint: string;\n  @Input() slideToggle: boolean = false;\n\n  constructor(_injector: Injector) { \n    super(_injector);\n  }\n\n  ngOnInit() {\n    this.initializeForm();\n  }\n}\n","import { Component, OnInit, forwardRef, Input, Injector } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { AnyAppModelControl } from '../model-control';\n\n@Component({\n  selector: 'aa-comp-select',\n  template: `<aa-comp-label *ngIf=\"label\">\n  {{label}}\n</aa-comp-label>\n\n<mat-form-field>\n  <mat-select *ngIf=\"!multiple\" [placeholder]=\"placeholder\" #input [(ngModel)]=\"innerValue\" [disabled]=\"disabled\"\n    [errorStateMatcher]=\"matcher\">\n    <mat-option *ngIf=\"hasRequiredField == false\">Maak een keuze</mat-option>\n    <mat-option *ngFor=\"let item of items\" [value]=\"valueField != null ? item[valueField] : item\">{{textField != null ? item[textField] : item}}</mat-option>\n  </mat-select>\n  \n  <mat-select *ngIf=\"multiple\" multiple [placeholder]=\"placeholder\" #input [(ngModel)]=\"innerValue\" [disabled]=\"disabled\"\n    [errorStateMatcher]=\"matcher\">\n    <mat-option *ngIf=\"hasRequiredField == false\">Maak een keuze</mat-option>\n    <mat-option *ngFor=\"let item of items\" [value]=\"valueField != null ? item[valueField] : item\">{{textField != null ? item[textField] : item}}</mat-option>\n  </mat-select>\n\n  <mat-hint *ngIf=\"hint\">{{hint}}</mat-hint>\n  \n  \n</mat-form-field>\n<aa-comp-error [errorControl]=\"formControl\"></aa-comp-error>`,\n  styles: [``],\n  providers: [\n    { \n      provide: NG_VALUE_ACCESSOR, //Angular internaly injects all values that are registered on the NG_VALUE_ACCESSOR token\n      useExisting: forwardRef(() => SelectComponent),\n      multi: true\n    }\n  ]\n})\nexport class SelectComponent extends AnyAppModelControl implements OnInit {\n  @Input() items: any[];\n  @Input() valueField: string = \"id\";\n  @Input() textField: string = \"text\";\n\n  @Input() multiple: boolean = false;\n  @Input() label: string;\n  @Input() placeholder: string;\n  @Input() hint: string;\n\n  constructor(_injector: Injector) { \n    super(_injector);\n  }\n\n  ngOnInit() {\n    this.initializeForm();\n  }\n}\n","import { Component, OnInit, Input, forwardRef, Inject, Injector } from '@angular/core';\nimport { FormControl, ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { AnyAppModelControl } from '../model-control';\nimport {MomentDateAdapter} from '@angular/material-moment-adapter';\nimport {DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE} from '@angular/material/core';\n\n// Depending on whether rollup is used, moment needs to be imported differently.\n// Since Moment.js doesn't have a default export, we normally need to import using the `* as`\n// syntax. However, rollup creates a synthetic default module and we thus need to import it using\n// the `default as` syntax.\nimport * as _moment from 'moment';\nimport { ANYAPP_COMPONENTS_CONFIG, AnyAppComponentsConfig } from '../components.config';\n// tslint:disable-next-line:no-duplicate-imports\n//import {default as _rollupMoment} from 'moment';\n\nconst moment = /*_rollupMoment ||*/ _moment;\n\n// See the Moment.js docs for the meaning of these formats:\n// https://momentjs.com/docs/#/displaying/format/\nexport const MY_FORMATS = {\n  parse: {\n    dateInput: 'LL',\n  },\n  display: {\n    dateInput: 'LL',\n    monthYearLabel: 'MMM YYYY',\n    dateA11yLabel: 'LL',\n    monthYearA11yLabel: 'MMMM YYYY',\n  },\n};\n\n@Component({\n  selector: 'aa-comp-datepicker',\n  template: `<aa-comp-label *ngIf=\"label\">\n  {{label}}\n</aa-comp-label>\n\n<mat-form-field>\n  <input matInput [disabled]=\"disabled\" [matDatepicker]=\"picker\" [placeholder]=\"placeholder\" #input [(ngModel)]=\"innerValue\" [errorStateMatcher]=\"matcher\">\n  <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n  <mat-datepicker #picker></mat-datepicker>\n\n  <mat-hint *ngIf=\"hint\">{{hint}}</mat-hint>\n\n\n  <aa-comp-error [errorControl]=\"formControl\"></aa-comp-error>\n</mat-form-field>`,\n  styles: [``],\n  providers: [\n    { \n      provide: NG_VALUE_ACCESSOR, //Angular internaly injects all values that are registered on the NG_VALUE_ACCESSOR token\n      useExisting: forwardRef(() => DatepickerComponent),\n      multi: true\n    },\n    // `MomentDateAdapter` can be automatically provided by importing `MomentDateModule` in your\n    // application's root module. We provide it at the component level here, due to limitations of\n    // our example generation script.\n    {provide: DateAdapter, useClass: MomentDateAdapter, deps: [MAT_DATE_LOCALE]},\n    {provide: MAT_DATE_FORMATS, useValue: MY_FORMATS},\n  ]\n})\nexport class DatepickerComponent extends AnyAppModelControl implements OnInit, ControlValueAccessor {  \n  @Input() label: string;\n  @Input() placeholder: string;\n  @Input() hint: string;\n\n  @Input() locale: string;\n\n  constructor(\n    _injector: Injector,\n    private _adapter: DateAdapter<any>) {\n    super(_injector);\n\n    this.locale = this.config.locale;\n  }\n\n  ngOnInit() {\n    this._adapter.setLocale(this.locale);\n    this.initializeForm();\n  }\n}\n","import { Component, OnInit, forwardRef, Input, Injector } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { AnyAppModelControl } from '../model-control';\n\n@Component({\n  selector: 'aa-comp-slider',\n  template: `<aa-comp-label *ngIf=\"label\">\n    {{label}}\n  </aa-comp-label>\n  \n<mat-slider [min]=\"min\" [max]=\"max\" [step]=\"step\" #input [(ngModel)]=\"innerValue\" \n  [disabled]=\"disabled\"></mat-slider>\n\n<mat-hint *ngIf=\"hint\">{{hint}}</mat-hint>\n\n\n<aa-comp-error [errorControl]=\"formControl\"></aa-comp-error>`,\n  styles: [``],\n  providers: [\n    { \n      provide: NG_VALUE_ACCESSOR, //Angular internaly injects all values that are registered on the NG_VALUE_ACCESSOR token\n      useExisting: forwardRef(() => SliderComponent),\n      multi: true\n    }\n  ]\n})\nexport class SliderComponent extends AnyAppModelControl implements OnInit {\n  @Input() label: string;\n  @Input() hint: string;\n\n  @Input() min: number;\n  @Input() max: number;\n  @Input() step: number;\n\n  constructor(_injector: Injector) { \n    super(_injector);\n  }\n\n  ngOnInit() {\n    this.initializeForm();\n  }\n\n}\n","import { Component, OnInit, Input, Injector } from '@angular/core';\nimport { AnyAppFormControl } from '../form-control';\n\n@Component({\n  selector: 'aa-comp-icon',\n  template: `<mat-icon [color]=\"color\" [inline]=\"inline\">{{icon}}</mat-icon>\n`,\n  styles: [``]\n})\nexport class IconComponent extends AnyAppFormControl implements OnInit {\n  @Input() icon: string;\n  @Input() color: string;\n  @Input() inline: boolean;\n\n  constructor(_injector: Injector) { \n    super(_injector);\n  }\n\n  ngOnInit() {\n    this.initializeForm();\n  }\n\n}\n","import { Component, OnInit, Input, forwardRef, Injector } from '@angular/core';\nimport { FormControl, ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { AnyAppModelControl } from '../model-control';\n\n@Component({\n  selector: 'aa-comp-textarea',\n  template: `<aa-comp-label *ngIf=\"label\">\n  {{label}}\n</aa-comp-label>\n\n<mat-form-field>\n  <textarea matInput [placeholder]=\"placeholder\" #input [type]=\"type\" [(ngModel)]=\"innerValue\" \n    [errorStateMatcher]=\"matcher\" [disabled]=\"disabled\"></textarea>\n\n  <mat-hint *ngIf=\"hint\">{{hint}}</mat-hint>\n  \n<aa-comp-error [errorControl]=\"formControl\"></aa-comp-error>\n\n</mat-form-field>\n<!--[formControl]=\"form?.controls[formControlName]\"-->`,\n  styles: [``],\n  providers: [\n    { \n      provide: NG_VALUE_ACCESSOR, \n      useExisting: forwardRef(() => TextareaComponent),\n      multi: true\n    }\n  ]\n})\nexport class TextareaComponent extends AnyAppModelControl implements OnInit, ControlValueAccessor {  \n  @Input() label: string;\n  @Input() placeholder: string;\n  @Input() type: string = \"text\";\n  @Input() hint: string;\n\n  constructor(_injector: Injector) { \n    super(_injector);\n  }\n\n  ngOnInit() {\n    this.initializeForm();\n  }\n}\n","import { Component, OnInit, Input, Injector } from '@angular/core';\nimport { AnyAppFormControl } from '../form-control';\n\n@Component({\n  selector: 'aa-comp-label',\n  template: `<label [for]=\"for\">\n  <ng-content></ng-content>\n</label>`,\n  styles: [``]\n})\nexport class LabelComponent extends AnyAppFormControl implements OnInit {\n  @Input() for: string;\n  \n  constructor(_injector: Injector) { \n    super(_injector);\n  }\n\n  ngOnInit() {\n  }\n\n}\n","import { Directive, OnInit, OnChanges, Input, Inject, Output, EventEmitter, Injector } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { AnyAppEventModel, AnyAppEventKeys } from '../components.model';\nimport { AnyAppBaseControl } from '../base-control';\n\n@Directive({\n  selector: '[aa-comp-form]'\n})\nexport class FormDirective extends AnyAppBaseControl implements OnInit, OnChanges {\n  @Input() aaCompForm: NgForm;\n  @Input() reset: boolean;\n  @Input() invalidFormMessage: string;\n\n  constructor(\n    _injector: Injector) {\n      super(_injector);\n  }\n\n  ngOnInit() {\n    if(this.aaCompForm != null) {\n      this.aaCompForm.ngSubmit.subscribe((data) => {\n        if(this.aaCompForm.valid == false) {\n          var sb = this.componentsService.showMessage(this.config.errorMessages.invalidFormMessage, null);\n          sb.onAction().subscribe(x => {\n            this.onEvent.emit(new AnyAppEventModel(AnyAppEventKeys.MESSAGE_CLICK))\n          });\n        } \n      });\n    }\n  }\n\n  ngOnChanges() {\n    if(this.reset == true) {\n      this.aaCompForm.resetForm();\n    }\n  }\n}\n","import { Component, OnInit, Input, Injector } from '@angular/core';\nimport { AnyAppBaseControl } from '../base-control';\n\n@Component({\n  selector: 'aa-comp-loading',\n  template: `<mat-progress-bar *ngIf=\"visible\" mode=\"indeterminate\"></mat-progress-bar>`,\n  styles: [``]\n})\nexport class LoadingComponent extends AnyAppBaseControl implements OnInit {\n  @Input() visible: boolean = false;\n\n  constructor(_injector: Injector) {\n    super(_injector);\n  }\n\n  ngOnInit() {\n  }\n\n}\n","import { Component, OnInit, Input, Injector } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { AnyAppBaseControl } from '../base-control';\n\n@Component({\n  selector: 'aa-comp-error',\n  template: `<mat-error *ngIf=\"errorControl && errorControl.hasError('required')\">\n  {{config.errorMessages.required}}\n</mat-error>\n<mat-error *ngIf=\"errorControl && errorControl.hasError('email')\">\n  {{config.errorMessages.email}}\n</mat-error>\n<mat-error *ngIf=\"errorControl && errorControl.hasError('pattern')\">\n  {{config.errorMessages.pattern}}\n</mat-error>\n<mat-error *ngIf=\"errorControl && errorControl.hasError('minLength')\">\n  {{config.errorMessages.minLength}}\n</mat-error>\n<mat-error *ngIf=\"errorControl && errorControl.hasError('maxLength')\">\n  {{config.errorMessages.maxLength}}\n</mat-error>`,\n  styles: [``]\n})\nexport class ErrorComponent extends AnyAppBaseControl implements OnInit {  \n  @Input() errorControl: FormControl;\n\n  constructor(_injector: Injector) { \n    super(_injector);\n  }\n\n  ngOnInit() {\n  }\n}\n","import { Injectable, Optional, SkipSelf, Inject } from \"@angular/core\";\r\nimport { MatPaginatorIntl  } from \"@angular/material\";\r\nimport { ANYAPP_COMPONENTS_CONFIG } from \"../components.config\";\r\nimport { AnyAppComponentsConfig } from \"../components.config\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class GenericPaginatorIntl extends MatPaginatorIntl {\r\n\tconstructor(\r\n    @Inject(ANYAPP_COMPONENTS_CONFIG) private config: AnyAppComponentsConfig) {\r\n\t\t\tsuper();\r\n\r\n\t\t\t// set labels\r\n\t\t\tthis.itemsPerPageLabel = config.locales.paginator_itemsPerPage;\r\n\t\t\tthis.nextPageLabel = config.locales.paginator_nextPage;\r\n\t\t\tthis.previousPageLabel = config.locales.paginator_previousPage;\r\n\t\t\tthis.firstPageLabel = config.locales.paginator_firstPage;\r\n\t\t\tthis.lastPageLabel = config.locales.paginator_lastPage;\r\n\t\t\t//\r\n\t\t\tthis._of = config.locales.paginator_of;\r\n\t\t}\r\n\t\r\n\tprivate _of: string;\r\n\t\r\n\t/** A label for the range of items within the current page and the length of the whole list. */\r\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\r\n    if (length == 0 || pageSize == 0) { return `0 ${this._of} ${length}`; }\r\n\r\n    length = Math.max(length, 0);\r\n\r\n    const startIndex = page * pageSize;\r\n\r\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\r\n    const endIndex = startIndex < length ?\r\n        Math.min(startIndex + pageSize, length) :\r\n        startIndex + pageSize;\r\n\r\n    return `${startIndex + 1} - ${endIndex} ${this._of} ${length}`;\r\n  }\r\n}\r\n\r\nexport function ANYAPP_PAGINATOR_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\r\n  return parentIntl || new MatPaginatorIntl();\r\n}\r\n\r\nexport const ANYAPP_PAGINATOR_PROVIDER = {\r\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\r\n  provide: MatPaginatorIntl,\r\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\r\n  useFactory: ANYAPP_PAGINATOR_PROVIDER_FACTORY\r\n};","import { Injectable, Optional, SkipSelf, Inject } from \"@angular/core\";\r\nimport { MatSortHeaderIntl  } from \"@angular/material\";\r\nimport { ANYAPP_COMPONENTS_CONFIG } from \"../components.config\";\r\nimport { AnyAppComponentsConfig } from \"../components.config\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class GenericSortHeaderIntl extends MatSortHeaderIntl {\r\n\tconstructor(\r\n    @Inject(ANYAPP_COMPONENTS_CONFIG) private config: AnyAppComponentsConfig) {\r\n\t\t\tsuper();\r\n\r\n\t\t\t// set labels\r\n\t\t\tthis._sortBtnLabel = config.locales.sort_buttonLabel;\r\n\t\t}\r\n\t\r\n\tprivate _sortBtnLabel: string;\r\n\t\r\n\t/** ARIA label for the sorting button. */\r\n  sortButtonLabel = (id: string) => {\r\n    return `${this._sortBtnLabel} ${id}`;\r\n  }\r\n}\r\n\r\nexport function ANYAPP_SORT_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\r\n  return parentIntl || new MatSortHeaderIntl();\r\n}\r\n\r\nexport const ANYAPP_SORT_PROVIDER = {\r\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\r\n  provide: MatSortHeaderIntl,\r\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\r\n  useFactory: ANYAPP_SORT_PROVIDER_FACTORY\r\n};","import { Component, OnInit, Input, Injector, ViewEncapsulation } from '@angular/core';\nimport { AnyAppBaseControl } from '../base-control';\nimport { AnyAppMenuItem, AnyAppEventModel, AnyAppEventKeys } from '../components.model';\n\n@Component({\n  selector: 'aa-comp-top-menu',\n  template: `<mat-toolbar color=\"primary\" class=\"mat-elevation-z6\">\n  <mat-toolbar-row>\n\n    <div style=\"display: flex; flex:1; justify-content: space-between;\">\n      <div>\n\n        <button *ngIf=\"sideNavRef\" mat-icon-button (click)=\"sideNavRef.toggle()\">\n          <mat-icon>menu</mat-icon>\n        </button>\n\n        <span>{{title}}</span>\n      </div>\n\n\n      <ng-content></ng-content>\n\n\n      <div>\n\n        <button *ngIf=\"showNotification\" (click)=\"notificationItemClick()\" mat-icon-button>\n          <mat-icon>notification_important</mat-icon>\n        </button>\n\n        <button *ngIf=\"showFace\" (click)=\"faceItemClick()\" mat-icon-button>\n          <mat-icon>face</mat-icon>\n        </button>\n\n        <mat-menu #appMenu=\"matMenu\">\n          <button mat-menu-item *ngFor=\"let menuItem of menu\" (click)=\"menuItemClick(menuItem)\">{{menuItem.text}}</button>\n        </mat-menu>\n\n        <button *ngIf=\"menu && menu.length > 0\" mat-icon-button [matMenuTriggerFor]=\"appMenu\">\n          <mat-icon>more_vert</mat-icon>\n        </button>\n\n      </div>\n    </div>\n\n  </mat-toolbar-row>\n</mat-toolbar>`,\n  styles: [``]\n})\nexport class TopMenuComponent extends AnyAppBaseControl implements OnInit {\n  \n  @Input() sideNavRef: any;\n  @Input() title: string;\n\n  @Input() menu: AnyAppMenuItem[];\n  @Input() showFace: boolean = false;\n  @Input() showNotification: boolean = false;\n\n  constructor(_injector: Injector) {\n    super(_injector);\n  }\n\n  ngOnInit() {\n  }\n\n  notificationItemClick() {\n    this.onEvent.emit(new AnyAppEventModel(AnyAppEventKeys.MENU_NOTIFICATION_CLICK));\n  } \n\n  faceItemClick() {\n      this.onEvent.emit(new AnyAppEventModel(AnyAppEventKeys.MENU_FACE_CLICK));\n  }\n\n  menuItemClick(menuItem: AnyAppMenuItem) {\n    if(menuItem)    \n      this.onEvent.emit(new AnyAppEventModel<AnyAppMenuItem>(AnyAppEventKeys.MENU_ITEM_CLICK, menuItem));\n  }\n}\n","import { Component, OnInit, Injector, Input } from '@angular/core';\nimport { AnyAppBaseControl } from '../base-control';\nimport { AnyAppEventModel, AnyAppTreeModel } from '../components.model';\n\n@Component({\n  selector: 'aa-comp-side-menu',\n  template: `<div class=\"wrapper\" [style.paddingLeft.px]=\"level*10\">\n  <div *ngFor=\"let item of items\">\n    <aa-comp-side-menu-item (onEvent)=\"onItemClick($event)\" [item]=\"item\" [level]=\"level\"></aa-comp-side-menu-item>\n\n    <div><!--[hidden]=\"item.children?.length == 0 || !item.expanded\"-->\n      <aa-comp-side-menu [items]=\"item.children\" [level]=\"level+1\"></aa-comp-side-menu>\n    </div>\n  </div>\n</div>`,\n  styles: [``]\n})\nexport class SideMenuComponent extends AnyAppBaseControl implements OnInit {\n  @Input() items: AnyAppTreeModel[];\n  @Input() level: number = 0;\n\n  constructor(_injector: Injector) {\n    super(_injector);\n  }\n\n  ngOnInit() {\n  }\n\n  // pass event emitter to the app\n  onItemClick(model: AnyAppEventModel<AnyAppTreeModel>) {\n    if(model)\n      this.onEvent.emit(model);\n  }\n\n}\n","import { Component, OnInit, Input, Output, EventEmitter, Injector } from '@angular/core';\nimport { AnyAppTreeModel, AnyAppEventModel, AnyAppEventKeys } from '../../components.model';\nimport { AnyAppBaseControl } from '../../base-control';\n\n@Component({\n  selector: 'aa-comp-side-menu-item',\n  template: `<div *ngIf=\"item\" (click)=\"clickMenuItem()\">\n  <button mat-button [class.sub]=\"level > 0\">\n    \n    <span>{{item.text}}</span>\n    \n    <mat-icon *ngIf=\"item.children?.length > 0\">\n        {{item.expanded ? 'keyboard_arrow_down' : 'keyboard_arrow_right'}}\n    </mat-icon>\n  </button>\n</div>`,\n  styles: [`button{width:100%;text-align:left}button:not(.sub) span{text-transform:uppercase}mat-icon{position:absolute;top:0;right:0;margin:4px}.sub{font-weight:400}`]\n})\nexport class SideMenuItemComponent extends AnyAppBaseControl implements OnInit {\n  @Input() item: AnyAppTreeModel;\n  @Input() level: number;\n\n  constructor(_inject: Injector) {\n    super(_inject);\n  }\n\n  ngOnInit() {\n  }\n\n  clickMenuItem() {    \n    if(this.item.children && this.item.children.length > 0) {\n      this.item.expanded = !this.item.expanded;\n    }\n\n    if(this.item.navigateUrl != null) {\n      this.onEvent.emit(new AnyAppEventModel<AnyAppTreeModel>(AnyAppEventKeys.MENU_ITEM_CLICK, this.item));\n    }\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport {\n  MatButtonModule, MatSidenavModule, MatIconModule, MatTreeModule, MatDividerModule, MatToolbarModule, MatMenuModule,\n  MatProgressBarModule, MatTableModule, MatPaginatorModule, MatSortModule, MatSnackBarModule, MatCheckboxModule, MatInputModule,\n  MatSlideToggleModule, MatSelectModule, MatDatepickerModule, MatSliderModule, MatPaginatorIntl, MatSortHeaderIntl\n} from '@angular/material';\n\nimport { ANYAPP_COMPONENTS_CONFIG } from './components.config';\nimport { ButtonComponent } from './button/button.component';\nimport { TableComponent } from './table/table.component';\nimport { InputComponent } from './input/input.component';\nimport { CheckboxComponent } from './checkbox/checkbox.component';\nimport { SelectComponent } from './select/select.component';\nimport { DatepickerComponent } from './datepicker/datepicker.component';\nimport { SliderComponent } from './slider/slider.component';\nimport { IconComponent } from './icon/icon.component';\nimport { TextareaComponent } from './textarea/textarea.component';\nimport { LabelComponent } from './label/label.component';\nimport { FormDirective } from './form/form.directive';\nimport { LoadingComponent } from './loading/loading.component';\nimport { ErrorComponent } from './error/error.component';\nimport { GenericPaginatorIntl } from './table/paginator.intl';\nimport { GenericSortHeaderIntl } from './table/sort.intl';\nimport { TopMenuComponent } from './top-menu/top-menu.component';\nimport { SideMenuComponent } from './side-menu/side-menu.component';\nimport { SideMenuItemComponent } from './side-menu/side-menu-item/side-menu-item.component';\nimport { TableSelectEnum } from './components.config';\nimport { ModuleWithProviders } from '../../../../node_modules/@angular/compiler/src/core';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    BrowserAnimationsModule,\n\n    MatButtonModule,\n    MatIconModule,\n    MatSnackBarModule,\n    MatSidenavModule,\n    MatToolbarModule,\n    MatMenuModule,\n    MatIconModule,\n    //MatTreeModule,\n    //MatDividerModule,\n    MatProgressBarModule,\n    MatCheckboxModule,\n    MatSlideToggleModule,\n    MatSelectModule,\n    MatDatepickerModule,\n    MatSliderModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatInputModule\n  ],\n  declarations: [\n    TableComponent, InputComponent, CheckboxComponent, SelectComponent, ButtonComponent, DatepickerComponent,\n    FormDirective, TextareaComponent, LabelComponent, SliderComponent, IconComponent, LoadingComponent, ErrorComponent,\n    TopMenuComponent, SideMenuComponent,\n    // no export\n    SideMenuItemComponent\n  ],\n  exports: [\n    TableComponent, InputComponent, CheckboxComponent, SelectComponent, ButtonComponent, DatepickerComponent,\n    FormDirective, TextareaComponent, LabelComponent, SliderComponent, IconComponent, LoadingComponent, ErrorComponent,\n    TopMenuComponent, SideMenuComponent,\n    // material exports\n    MatSidenavModule, MatToolbarModule\n  ],\n\n})\nexport class ComponentsModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: ComponentsModule,\n      providers: [{\n        provide: ANYAPP_COMPONENTS_CONFIG,\n        useValue: {\n          messageDuration: 3000,\n          locale: \"en-US\",\n\n          locales: {\n            paginator_firstPage: \"First page\",\n            paginator_lastPage: \"Last page\",\n            paginator_itemsPerPage: \"Items per page\",\n            paginator_of: \"of\",\n            paginator_nextPage: \"Next page\",\n            paginator_previousPage: \"Previous page\",\n            sort_buttonLabel: \"Change sorting for\"\n          },\n\n          errorMessages: {\n            required: \"This field is required\",\n            email: \"Please enter a valid e-mail address\",\n            pattern: \"Your input does not match the pattern\",\n            minLength: \"The length of your input is too short\",\n            maxLength: \"The length of your input is too long\",\n            invalidFormMessage: \"The form is invalid. Please correct any errors.\"\n          },\n          tableConfig: {\n            pageSize: 20,\n            selectOption: TableSelectEnum.NoSelect\n          },\n\n          buttonConfig: {\n            buttonTimeoutThreshold: 250\n          },\n\n          formConfig: {\n          }\n        }\n      },\n      {\n        provide: MatPaginatorIntl,\n        useClass: GenericPaginatorIntl,\n        deps: [ANYAPP_COMPONENTS_CONFIG]\n      },\n      {\n        provide: MatSortHeaderIntl,\n        useClass: GenericSortHeaderIntl,\n        deps: [ANYAPP_COMPONENTS_CONFIG]\n      }]\n    };\n  }\n}\n"],"names":[],"mappings":"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"}
